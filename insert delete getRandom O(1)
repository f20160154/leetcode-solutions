class RandomizedSet {
public:
    /** Initialize your data structure here. */
    map<int,int> map1;
    vector<int> arr;
    RandomizedSet() {
        map1.clear();
        arr.clear();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(map1[val]==0)
        {
            arr.push_back(val);
            map1[val]=arr.size();
            return true;
        }
        return false;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(map1[val]>0)
        {
            if(arr.size()>1)
            {
                vector<int>::iterator itr=arr.end()-1;
                arr[map1[val]-1]=*itr;
                map1[*itr]=map1[val];
                arr.pop_back();
                map1[val]=0;
            }
            else
            {
                arr.clear();
                map1[val]=0;
            }
            return true;
        }
        return false;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        int x=rand()%arr.size();
        return arr[x];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
