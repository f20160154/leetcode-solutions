/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> answer;
        if(root==NULL)
        {
            answer.clear();
            return answer;
        }
        queue<pair<TreeNode*,int>> q;
        q.push(make_pair(root,0));
        vector<int> w;
        w.push_back(root->val);
        answer.push_back(w);
        //answer[0].push_back(root->val);
        while(!q.empty()) {
            pair<TreeNode*,int> temp=q.front();
            q.pop();
            if(temp.first->left)
            {
                if(answer.size()<=temp.second+1)
                {
                    vector<int> e;
                    e.push_back(temp.first->left->val);
                    answer.push_back(e);
                }
                else
                {
                    answer[temp.second+1].push_back(temp.first->left->val);
                }
                q.push(make_pair(temp.first->left,temp.second+1));
                
            }
            if(temp.first->right) 
            {
                if(answer.size()<=temp.second+1)
                {
                    vector<int> e;
                    e.push_back(temp.first->right->val);
                    answer.push_back(e);
                }
                else
                {
                    answer[temp.second+1].push_back(temp.first->right->val);
                }
                q.push(make_pair(temp.first->right,temp.second+1));
            }
        }
        for(int i=0;i<answer.size()/2;i++)
        {
            vector<int> temp= answer[i];
            answer[i]=answer[answer.size()-i-1];
            answer[answer.size()-i-1]=temp;
        }
        return answer;
    }
};
