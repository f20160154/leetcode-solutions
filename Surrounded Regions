class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if(board.size()==0)
        {
            return;
        }
        map<pair<int,int>,int>m;
        queue<pair<int,int>>q;
        int i=0;int j=0;
        for(j=0;j<=board[i].size()-1;j++)
        {
            if(board[i][j]=='O')
            {
                m[make_pair(i,j)]=1;
                q.push(make_pair(i,j));
            }
        }
        i=board.size()-1;
        for(j=0;j<=board[i].size()-1;j++)
        {
            if(board[i][j]=='O')
            {
                m[make_pair(i,j)]=1;
                q.push(make_pair(i,j));
            }
        }
        j=0;
        for(i=0;i<=board.size()-1;i++)
        {
            if(board[i][j]=='O')
            {
                m[make_pair(i,j)]=1;
                q.push(make_pair(i,j));
            }
        }
        j=board[0].size()-1;
        for(i=0;i<=board.size()-1;i++)
        {
            if(board[i][j]=='O')
            {
                m[make_pair(i,j)]=1;
                q.push(make_pair(i,j));
            }
        }
        while(!q.empty())
        {
            pair<int,int> temp=q.front();
            q.pop();
            if(temp.first-1>=0 and board[temp.first-1][temp.second]=='O')
            {
                if(m[make_pair(temp.first-1,temp.second)]==0)
                {
                    m[make_pair(temp.first-1,temp.second)]=1;
                    q.push(make_pair(temp.first-1,temp.second));
                }
            }
            if(temp.first+1<=board.size()-1 and board[temp.first+1][temp.second]=='O')
            {
                if(m[make_pair(temp.first+1,temp.second)]==0)
                {
                    m[make_pair(temp.first+1,temp.second)]=1;
                    q.push(make_pair(temp.first+1,temp.second));
                }
            }
            if(temp.second-1>=0 and board[temp.first][temp.second-1]=='O')
            {
                if(m[make_pair(temp.first,temp.second-1)]==0)
                {
                    m[make_pair(temp.first,temp.second-1)]=1;
                    q.push(make_pair(temp.first,temp.second-1));
                }
            }
            if(temp.second+1<=board[temp.first].size()-1 and board[temp.first][temp.second+1]=='O')
            {
                if(m[make_pair(temp.first,temp.second+1)]==0)
                {
                    m[make_pair(temp.first,temp.second+1)]=1;
                    q.push(make_pair(temp.first,temp.second+1));
                }
            }
        }
        for(i=0;i<=board.size()-1;i++)
        {
            for(j=0;j<=board[i].size()-1;j++)
            {
                if(board[i][j]=='O' and m[make_pair(i,j)]==0)
                {
                    board[i][j]='X';
                }
            }
        }
        return;
    }
};
