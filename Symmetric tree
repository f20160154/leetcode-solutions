/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL)
        {
            return true;
        }
        queue<TreeNode*> q1,q2;
        if(root->left and root->right)
        {
            q1.push(root->left);
            q2.push(root->right);
            
            if(q1.front()->val != q2.front()->val)
            {
                return false;
            }
            
            while(!q1.empty() or !q2.empty())
            {
                TreeNode* temp1= q1.front();
                TreeNode* temp2= q2.front();
                q1.pop();
                q2.pop();
                if(temp1->left and temp2->right)
                {
                    if(temp1->left->val == temp2->right->val)
                    {
                        q1.push(temp1->left);
                        q2.push(temp2->right);
                    }
                    else
                    {
                        return false;
                    }
                }
                else if((temp1->left and !temp2->right) or (!temp1->left and temp2->right))
                {
                    return false;
                }
                
                 if(temp1->right and temp2->left)
                {
                    if(temp1->right->val == temp2->left->val)
                    {
                        q1.push(temp1->right);
                        q2.push(temp2->left);
                    }
                    else
                    {
                        return false;
                    }
                }
                else if((temp1->right and !temp2->left) or (!temp1->right and temp2->left))
                {
                    return false;
                }
                
                    
            }
            return true;
        }
        if (!root->left and !root->right)
        {
            return true;
        }
        return false;
    }
};
