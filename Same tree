/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(!p and !q)
        {
            return true;
        }
        else if((p and !q) or (q and !p))
        {
            return false;
        }
        queue<TreeNode*> q1,q2;
        q1.push(p);
        q2.push(q);
        if(p->val!=q->val)
        {
            return false;
        }
        while(!q1.empty() || !q2.empty())
        {
            TreeNode* temp1 = q1.front();
            TreeNode* temp2 = q2.front();
            q1.pop();
            q2.pop();
            if(temp1->left and temp2->left)
            {
                if(temp1->left->val==temp2->left->val)
                {
                    q1.push(temp1->left);
                    q2.push(temp2->left);
                }
                else
                {
                    return false;
                }
            }
            else if ((temp1->left and !temp2->left) or (!temp1->left and temp2->left))
            {
                return false;
            }
            
            if(temp1->right and temp2->right)
            {
                if(temp1->right->val==temp2->right->val)
                {
                    q1.push(temp1->right);
                    q2.push(temp2->right);
                }
                else
                {
                    return false;
                }
            }
            else if ((temp1->right and !temp2->right) or (!temp1->right and temp2->right))
            {
                return false;
            }
        }
        return true;
    }
};
