class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        if(nums.size()==0)
        {
            return nums;
        }
        merge_sort(nums,0,nums.size()-1);
        vector<int>div;
        vector<int>prev;
        int count=0,max=-10000;
        for(int i=0;i<=nums.size()-1;i++)
        {div.push_back(1);
            prev.push_back(-1);
            for(int j=0;j<=i-1;j++)
            {
                if(nums[i]%nums[j]==0 and div[j]>=div[i])
                {
                    div[i]=div[j]+1;
                    prev[i]=j;
                }
            }
            //cout<< div[i]<<" " << i<<endl;
            if(div[i]>max)
            {
                count=i;
                max=div[i];
            }
        }
        //cout<<count<< " "<<nums.size();
        div.clear();
        while(count!=-1)
        {
            div.push_back(nums[count]);
            count=prev[count];
        }
        merge_sort(div,0,div.size()-1);
        return div;
    }
    
    void merge_sort(vector<int> &nums,int l,int r) {
        if(l<r)
        {
            int mid=(l+r)/2;
            merge_sort(nums,l,mid);
            merge_sort(nums,mid+1,r);
            merge(nums,l,mid,r);
        }
    }
    
    void merge(vector<int>&nums, int l,int mid,int r) {
        vector<int>left;
        vector<int>right;
        for(int i=l;i<=mid;i++)
        {
            left.push_back(nums[i]);
        }
        for(int i=mid+1;i<=r;i++)
        {
            right.push_back(nums[i]);
        }
        left.push_back(2147483647);
        right.push_back(2147483647);
        int j=0,k=0;
        for(int i=l;i<=r;i++)
        {
            if(left[j]<right[k])
            {
                nums[i]=left[j];
                j++;
            }
            else
            {
                nums[i]=right[k];
                k++;
            }
        }
    }
};
